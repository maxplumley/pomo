name: Release

on:
  push:
    branches:
      - main
      - next

jobs:
  prepare:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      DOCKER_CLI_EXPERIMENTAL: "enabled"
      flags: ""
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: docker/setup-qemu-action@v3
        if: matrix.os == 'ubuntu-latest'
      - uses: docker/setup-buildx-action@v3
        if: matrix.os == 'ubuntu-latest'
      - name: ghcr-login
        uses: docker/login-action@v3
        if: matrix.os != 'macos-latest'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-go@v5
        with:
          go-version: stable
      - if: ${{ github.event_name == 'workflow_dispatch' }}
        shell: bash
        run: |
          echo "flags=--nightly" >> $GITHUB_ENV
      - shell: bash
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - uses: actions/cache@v4
        if: matrix.os == 'ubuntu-latest'
        with:
          path: dist/linux
          key: linux-${{ env.sha_short }}${{ env.flags }}
      - uses: actions/cache@v4
        if: matrix.os == 'macos-latest'
        with:
          path: dist/darwin
          key: darwin-${{ env.sha_short }}${{ env.flags }}
      - uses: actions/cache@v4
        if: matrix.os == 'windows-latest'
        with:
          path: dist/windows
          key: windows-${{ env.sha_short }}${{ env.flags }}
          enableCrossOsArchive: true
      - uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser-pro
          version: latest
          args: release --clean --split ${{ env.flags }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest
    needs: prepare
    environment:
      name: release
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install -g semantic-release @semantic-release/exec @semantic-release/changelog @semantic-release/git

      - name: Run semantic-release
        id: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
      
      - name: Checkout versioned
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.semantic-release.outputs.new_version }}
          fetch-depth: 0

            # copy the cashes from prepare
      - shell: bash
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - uses: actions/cache@v3
        with:
          path: dist/linux
          key: linux-${{ env.sha_short }}
      - uses: actions/cache@v3
        with:
          path: dist/darwin
          key: darwin-${{ env.sha_short }}
      - uses: actions/cache@v3
        with:
          path: dist/windows
          key: windows-${{ env.sha_short }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: true
      
      - name: Release
        if: |
          steps.semantic-release.outputs.should_release == 'true' &&
          github.ref == 'refs/heads/main'
        uses: goreleaser/goreleaser-action@v4
        with:
          args: continue --merge --release-notes /tmp/release_notes.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAP_GITHUB_TOKEN: ${{ secrets.TAP_GITHUB_TOKEN }}
          GORELEASER_CURRENT_TAG: ${{ steps.semantic-release.outputs.new_version }}
